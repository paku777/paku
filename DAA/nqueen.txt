#include <iostream>
#include <vector>

using namespace std;

class NQueens {
private:
    int n;
    vector<vector<int>> board;
    
    // Check if a queen can be safely placed at board[row][col]
    bool isSafe(int row, int col) {
        // Check the same column
        for (int i = 0; i < row; ++i) {
            if (board[i][col] == 1) return false;
        }
        
        // Check the upper left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; --i, --j) {
            if (board[i][j] == 1) return false;
        }

        // Check the upper right diagonal
        for (int i = row, j = col; i >= 0 && j < n; --i, ++j) {
            if (board[i][j] == 1) return false;
        }

        return true;
    }

    // Solve the problem using backtracking
    bool solve(int row) {
        if (row == n) return true; // All queens are placed
        
        for (int col = 0; col < n; ++col) {
            if (board[rom][col] == 0 && isSafe(row, col)) {
                board[row][col] = 1; // Place queen
                
                if (solve(row + 1)) return true; // Recur for the next row
                
                board[row][col] = 0; // Backtrack
            }
        }
        return false;
    }

public:
    // Constructor to initialize board and place the first queen
    NQueens(int n, int initialRow, int initialCol) : n(n), board(n, vector<int>(n, 0)) {
        board[initialRow][initialCol] = 1;
    }

    // Function to solve the N-Queens problem and print the solution
    void solveAndPrint() {
        // Start from the second row since the first queen is already placed
        if (solve(1)) {
            // Print the solution
            for (const auto& row : board) {
                for (int cell : row) {
                    cout << (cell == 1 ? "Q " : ". ");
                }
                cout << endl;
            }
        } else {
            cout << "No solution exists for the given placement of the first queen." << endl;
        }
    }
};

int main() {
    int n, row, col;
    cout << "Enter the size of the board (n): ";
    cin >> n;
    cout << "Enter the row and column to place the first queen (0-based indexing): ";
    cin >> row >> col;

    // Create an NQueens instance with the first queen placed by the user
    NQueens queens(n, row, col);
    queens.solveAndPrint();

    return 0;
}